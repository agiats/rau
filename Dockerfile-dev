FROM nvidia/cuda:12.2.2-cudnn8-devel-ubuntu22.04
# UTF-8 encoding is necessary for printing non-ASCII characters to the
# terminal.
ENV LC_ALL C.UTF-8
# Install Python.
RUN PYTHON_MAJOR_VERSION=3 && \
    PYTHON_MINOR_VERSION=11 && \
    v=$PYTHON_MAJOR_VERSION.$PYTHON_MINOR_VERSION && \
    apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        # Installs add-apt-repository.
        software-properties-common \
        && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        python$v \
        python$v-dev \
        # Required by Poetry
        python$v-venv \
        # Required by numpy
        python$v-distutils \
        # Required by matplotlib
        python$v-tk \
        && \
    apt-get purge -y \
        software-properties-common \
        && \
    rm -rf /var/lib/apt/lists/* && \
# Poetry won't get installed correctly unless a `python` binary is present.
# The specific Python installation it points to also needs to have the venv
# module installed. The version of Python used to run the installation script
# should also match.
    ln -s "`which python$v`" /usr/local/bin/python && \
    ln -sf "`which python$v`" /usr/local/bin/python$PYTHON_MAJOR_VERSION
# Install Poetry.
# See https://python-poetry.org/docs/#installing-with-the-official-installer
RUN POETRY_VERSION=1.7.0 && \
    apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        curl \
        && \
    cd /tmp && \
    curl -sSL https://install.python-poetry.org > install-poetry.py && \
    POETRY_HOME=/usr/local/poetry python3 install-poetry.py --version $POETRY_VERSION && \
    rm install-poetry.py && \
    apt-get purge -y \
        curl \
        && \
    rm -rf /var/lib/apt/lists/*
ENV PATH /usr/local/poetry/bin:${PATH}
# Stores Python packages in the local directory.
# See https://python-poetry.org/docs/configuration/#virtualenvsin-project-boolean
ENV POETRY_VIRTUALENVS_IN_PROJECT true
# Install SentencePiece.
# See https://github.com/google/sentencepiece#build-and-install-sentencepiece-command-line-tools-from-c-source
RUN SENTENCEPIECE_VERSION=0.1.99 && \
    apt-get update -y && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
        curl \
        cmake \
        build-essential \
        pkg-config \
        libgoogle-perftools-dev \
        && \
    rm -rf /var/lib/apt/lists/* && \
    cd /tmp && \
    curl -L -o sentencepiece.tar.gz https://github.com/google/sentencepiece/archive/refs/tags/v$SENTENCEPIECE_VERSION.tar.gz && \
    ls -lh && \
    tar xzf sentencepiece.tar.gz && \
    rm sentencepiece.tar.gz && \
    cd sentencepiece-$SENTENCEPIECE_VERSION && \
    mkdir build && \
    cd build && \
    cmake .. && \
    make -j `nproc` && \
    make install && \
    ldconfig -v && \
    cd ../.. && \
    rm -r sentencepiece-$SENTENCEPIECE_VERSION && \
    apt-get purge -y \
        curl \
        cmake \
        build-essential \
        pkg-config \
        libgoogle-perftools-dev \
        && \
    rm -rf /var/lib/apt/lists/*
# Add src/ to PYTHONPATH.
ENV PYTHONPATH /app/src:${PYTHONPATH}
WORKDIR /app/
